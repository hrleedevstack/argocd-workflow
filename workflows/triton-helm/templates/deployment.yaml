# Copyright (c) 2019-2020, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "triton-inference-server.fullname" . }}
  #  name: triton
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "triton-inference-server.name" . }}
    chart: {{ template "triton-inference-server.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "triton-inference-server.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "triton-inference-server.name" . }}
        release: {{ .Release.Name }}

    spec:
#      hostIPC: true
      nodeSelector:
              #        gpushare: true
        kubernetes.io/hostname: trtis-worker-1
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.imageName }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}

          resources:
            limits:
                    #              nvidia.com/gpu: {{ .Values.image.numGpus }}
              aliyun.com/gpu-mem: 1
          env:
                  #            - name: AWS_ACCESS_KEY_ID
                  #              value: AKIAIOSFODNN7EXAMPLE
              #              value: minioadmin
              #            - name: AWS_SECRET_ACCESS_KEY
              #              value: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              #              value: minioadmin
          args: ["tritonserver", "--model-store=/models"]
#          args: ["trtserver", "--model-repository=/tmp/models"]
#          args: ["tritonserver", "--model-repository=s3://20.194.32.137:32595/models", "--model-control-mode=explicit", "--strict-model-config=false", "--exit-on-error=false", "--strict-readiness=false", "--log-info=true", "--log-warning=true", "--log-error=true", "--allow-metrics=true", "--log-verbose=2"]
#          args: ["tritonserver", "--model-repository=s3://183.111.177.139:9000/models", "--model-control-mode=explicit", "--strict-model-config=false", "--exit-on-error=false", "--strict-readiness=false", "--log-info=true", "--log-warning=true", "--log-error=true", "--log-verbose=2"]
#          args: ["trtserver", "--model-repository=/models", "--model-control-mode=poll", "--strict-model-config=true", "--api-version=2", "--strict-readiness=false"]
          ports:
            - containerPort: 8000
              name: http
            - containerPort: 8001
              name: grpc
            - containerPort: 8002
              name: metrics
          livenessProbe:
            initialDelaySeconds: 3
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              path: /v2/health/live
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              path: /v2/health/ready
              port: http

#          securityContext:
#            runAsUser: 1000
#            fsGroup: 1000
#            runAsUser: 0
#            fsGroup: 0

          volumeMounts:
          - mountPath: /models
            name: test-volume
      volumes:
      - name: test-volume
        hostPath:
          path: {{ .Values.image.modelRepositoryPath }}
          type: Directory
              #      nodeSelector:
              #        kubernetes.io/hostname: trtis-worker-2
